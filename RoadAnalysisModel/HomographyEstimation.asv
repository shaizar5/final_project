function H = HomographyEstimation(leftPoints, rightPoints, method, R,currCt,f,px,py,mx,my,s)

if (strcmp(method,'RANSAC'))
    %ransac
    H = RANSAC(leftPoints, rightPoints, 0, 9, Constants.NUM_OF_POINT_TO_GENERATE);
else
    % copmute H directly
    
    sizeLeft = size(leftPoints)
    sizeRight = size(rightPoints)
    if (sizeLeft(1) ~= sizeRight(1) || sizeLeft(2) ~= sizeRight(2))
        'input not have same size'
        return
    end
    
    Aodd  = [-leftPoints(1,:)', -leftPoints(2,:)', -ones(1,sizeLeft(2))', zeros(1,sizeLeft(2))', zeros(1,sizeLeft(2))', zeros(1,sizeLeft(2))', rightPoints(1,:)'.*leftPoints(1,:)', rightPoints(1,:)'.*leftPoints(2,:)', rightPoints(1,:)'];
    Aeven = [zeros(1,sizeLeft(2))', zeros(1,sizeLeft(2))', zeros(1,sizeLeft(2))', -leftPoints(1,:)', -leftPoints(2,:)', -ones(1,sizeLeft(2))', rightPoints(2,:)'.*leftPoints(1,:)', rightPoints(2,:)'.*leftPoints(2,:)', rightPoints(2,:)'];
    
    A = zeros(sizeLeft(2)*2, 9);
    A(1:2:end,:) = Aodd;
    A(2:2:end,:) = Aeven;
    
    [~,~,R] = svd(A);
    Hvector = R(:,end);
    H = reshape(Hvector,3,3)';
    H
    %x= H*[leftPoints;ones(1,sizeLeft(2))];
    %x2 = [x(1,:)./x(3,:) ; x(2,:)./x(3,:) ;x(3,:)./x(3,:) ]
    %[rightPoints;ones(1,sizeLeft(2))]
    %H*[leftPoints(:,1);1];
    x0 = mx*px;
    y0 = my*py;
    alphaX = f*mx;
    alphaY = f*my;
    K = [alphaX, s, x0;...
        0, alphaY, y0; ...
        0,0,1];
    
    Hab = (inv(K)*H*K);
    Hab = Hab./Hab(3,3)
    %Hab2 = eye(3)-([0;0;-Constants.STEP_SIZE]*[0,1,0]/Constants.CAMERA_HEIGHT)
    %H2 = K*Hab2*inv(K)
    tmp = (eye(3)-Hab)*Constants.CAMERA_HEIGHT
    t = -round(tmp(:,2))
    %n = [0 1 0];
    %tx = tmp(:,1)/1
    
    %x1 = H*[leftPoints(:,1);1];
    %x1 = x1/x1(3)
    %x2 = H2*[leftPoints(:,1);1];
    %x2 = x2/x2(3)
    %[rightPoints(:,1);1]
end



end

